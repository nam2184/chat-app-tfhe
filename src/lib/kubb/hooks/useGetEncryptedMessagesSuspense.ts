/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from "@/lib/authorized-client";
import type {
  GetEncryptedMessagesQueryResponse,
  GetEncryptedMessagesPathParams,
  GetEncryptedMessagesQueryParams,
  GetEncryptedMessages400,
} from "../types/GetEncryptedMessages";
import type {
  RequestConfig,
  ResponseErrorConfig,
} from "@/lib/authorized-client";
import type {
  QueryKey,
  QueryClient,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { queryOptions, useSuspenseQuery } from "@tanstack/react-query";

export const getEncryptedMessagesSuspenseQueryKey = (
  chatID: GetEncryptedMessagesPathParams["chatID"],
  params?: GetEncryptedMessagesQueryParams,
) =>
  [
    { url: "/encrypted-messages/:chatID", params: { chatID: chatID } },
    ...(params ? [params] : []),
  ] as const;

export type GetEncryptedMessagesSuspenseQueryKey = ReturnType<
  typeof getEncryptedMessagesSuspenseQueryKey
>;

/**
 * @summary Get messages for a chat
 * {@link /encrypted-messages/:chatID}
 */
export async function getEncryptedMessagesSuspense(
  chatID: GetEncryptedMessagesPathParams["chatID"],
  params?: GetEncryptedMessagesQueryParams,
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config;

  const res = await request<
    GetEncryptedMessagesQueryResponse,
    ResponseErrorConfig<GetEncryptedMessages400>,
    unknown
  >({
    method: "GET",
    url: `/encrypted-messages/${chatID}`,
    params,
    ...requestConfig,
  });
  return res.data;
}

export function getEncryptedMessagesSuspenseQueryOptions(
  chatID: GetEncryptedMessagesPathParams["chatID"],
  params?: GetEncryptedMessagesQueryParams,
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = getEncryptedMessagesSuspenseQueryKey(chatID, params);
  return queryOptions<
    GetEncryptedMessagesQueryResponse,
    ResponseErrorConfig<GetEncryptedMessages400>,
    GetEncryptedMessagesQueryResponse,
    typeof queryKey
  >({
    enabled: !!chatID,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return getEncryptedMessagesSuspense(chatID, params, config);
    },
  });
}

/**
 * @summary Get messages for a chat
 * {@link /encrypted-messages/:chatID}
 */
export function useGetEncryptedMessagesSuspense<
  TData = GetEncryptedMessagesQueryResponse,
  TQueryKey extends QueryKey = GetEncryptedMessagesSuspenseQueryKey,
>(
  chatID: GetEncryptedMessagesPathParams["chatID"],
  params?: GetEncryptedMessagesQueryParams,
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        GetEncryptedMessagesQueryResponse,
        ResponseErrorConfig<GetEncryptedMessages400>,
        TData,
        TQueryKey
      >
    > & {
      client?: QueryClient;
    };
    client?: Partial<RequestConfig> & { client?: typeof fetch };
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {};
  const queryKey =
    queryOptions?.queryKey ??
    getEncryptedMessagesSuspenseQueryKey(chatID, params);

  const query = useSuspenseQuery(
    {
      ...getEncryptedMessagesSuspenseQueryOptions(chatID, params, config),
      queryKey,
      ...queryOptions,
    } as unknown as UseSuspenseQueryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<
    TData,
    ResponseErrorConfig<GetEncryptedMessages400>
  > & { queryKey: TQueryKey };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
