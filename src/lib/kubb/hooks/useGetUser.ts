/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from "@/lib/authorized-client";
import type { GetUserQueryResponse, GetUser400 } from "../types/GetUser";
import type {
  RequestConfig,
  ResponseErrorConfig,
} from "@/lib/authorized-client";
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const getUserQueryKey = () => [{ url: "/user" }] as const;

export type GetUserQueryKey = ReturnType<typeof getUserQueryKey>;

/**
 * @summary Get current user info
 * {@link /user}
 */
export async function getUser(
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config;

  const res = await request<
    GetUserQueryResponse,
    ResponseErrorConfig<GetUser400>,
    unknown
  >({ method: "GET", url: `/user`, ...requestConfig });
  return res.data;
}

export function getUserQueryOptions(
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = getUserQueryKey();
  return queryOptions<
    GetUserQueryResponse,
    ResponseErrorConfig<GetUser400>,
    GetUserQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return getUser(config);
    },
  });
}

/**
 * @summary Get current user info
 * {@link /user}
 */
export function useGetUser<
  TData = GetUserQueryResponse,
  TQueryData = GetUserQueryResponse,
  TQueryKey extends QueryKey = GetUserQueryKey,
>(
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetUserQueryResponse,
        ResponseErrorConfig<GetUser400>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient };
    client?: Partial<RequestConfig> & { client?: typeof fetch };
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getUserQueryKey();

  const query = useQuery(
    {
      ...getUserQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetUser400>> & {
    queryKey: TQueryKey;
  };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
