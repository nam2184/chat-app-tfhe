/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from "@/lib/authorized-client";
import type {
  GetEvaluationKeyQueryResponse,
  GetEvaluationKey400,
} from "../types/GetEvaluationKey";
import type {
  RequestConfig,
  ResponseErrorConfig,
} from "@/lib/authorized-client";
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const getEvaluationKeyQueryKey = () =>
  [{ url: "/evaluation-key" }] as const;

export type GetEvaluationKeyQueryKey = ReturnType<
  typeof getEvaluationKeyQueryKey
>;

/**
 * @summary Get evaluation key from model service
 * {@link /evaluation-key}
 */
export async function getEvaluationKey(
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config;

  const res = await request<
    GetEvaluationKeyQueryResponse,
    ResponseErrorConfig<GetEvaluationKey400>,
    unknown
  >({
    method: "GET",
    url: `/evaluation-key`,
    ...requestConfig,
  });
  return res.data;
}

export function getEvaluationKeyQueryOptions(
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = getEvaluationKeyQueryKey();
  return queryOptions<
    GetEvaluationKeyQueryResponse,
    ResponseErrorConfig<GetEvaluationKey400>,
    GetEvaluationKeyQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return getEvaluationKey(config);
    },
  });
}

/**
 * @summary Get evaluation key from model service
 * {@link /evaluation-key}
 */
export function useGetEvaluationKey<
  TData = GetEvaluationKeyQueryResponse,
  TQueryData = GetEvaluationKeyQueryResponse,
  TQueryKey extends QueryKey = GetEvaluationKeyQueryKey,
>(
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetEvaluationKeyQueryResponse,
        ResponseErrorConfig<GetEvaluationKey400>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & {
      client?: QueryClient;
    };
    client?: Partial<RequestConfig> & { client?: typeof fetch };
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getEvaluationKeyQueryKey();

  const query = useQuery(
    {
      ...getEvaluationKeyQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetEvaluationKey400>> & {
    queryKey: TQueryKey;
  };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
