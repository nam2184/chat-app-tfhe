/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from "@/lib/authorized-client";
import type {
  GetMessagesQueryResponse,
  GetMessagesPathParams,
  GetMessagesQueryParams,
  GetMessages400,
} from "../types/GetMessages";
import type {
  RequestConfig,
  ResponseErrorConfig,
} from "@/lib/authorized-client";
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const getMessagesQueryKey = (
  chatID: GetMessagesPathParams["chatID"],
  params?: GetMessagesQueryParams,
) =>
  [
    { url: "/messages/:chatID", params: { chatID: chatID } },
    ...(params ? [params] : []),
  ] as const;

export type GetMessagesQueryKey = ReturnType<typeof getMessagesQueryKey>;

/**
 * @summary Get messages for a chat
 * {@link /messages/:chatID}
 */
export async function getMessages(
  chatID: GetMessagesPathParams["chatID"],
  params?: GetMessagesQueryParams,
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config;

  const res = await request<
    GetMessagesQueryResponse,
    ResponseErrorConfig<GetMessages400>,
    unknown
  >({
    method: "GET",
    url: `/messages/${chatID}`,
    params,
    ...requestConfig,
  });
  return res.data;
}

export function getMessagesQueryOptions(
  chatID: GetMessagesPathParams["chatID"],
  params?: GetMessagesQueryParams,
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = getMessagesQueryKey(chatID, params);
  return queryOptions<
    GetMessagesQueryResponse,
    ResponseErrorConfig<GetMessages400>,
    GetMessagesQueryResponse,
    typeof queryKey
  >({
    enabled: !!chatID,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return getMessages(chatID, params, config);
    },
  });
}

/**
 * @summary Get messages for a chat
 * {@link /messages/:chatID}
 */
export function useGetMessages<
  TData = GetMessagesQueryResponse,
  TQueryData = GetMessagesQueryResponse,
  TQueryKey extends QueryKey = GetMessagesQueryKey,
>(
  chatID: GetMessagesPathParams["chatID"],
  params?: GetMessagesQueryParams,
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetMessagesQueryResponse,
        ResponseErrorConfig<GetMessages400>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & {
      client?: QueryClient;
    };
    client?: Partial<RequestConfig> & { client?: typeof fetch };
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {};
  const queryKey =
    queryOptions?.queryKey ?? getMessagesQueryKey(chatID, params);

  const query = useQuery(
    {
      ...getMessagesQueryOptions(chatID, params, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetMessages400>> & {
    queryKey: TQueryKey;
  };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
