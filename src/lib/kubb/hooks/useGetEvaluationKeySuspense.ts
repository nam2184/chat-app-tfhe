/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from "@/lib/authorized-client";
import type {
  GetEvaluationKeyQueryResponse,
  GetEvaluationKey400,
} from "../types/GetEvaluationKey";
import type {
  RequestConfig,
  ResponseErrorConfig,
} from "@/lib/authorized-client";
import type {
  QueryKey,
  QueryClient,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { queryOptions, useSuspenseQuery } from "@tanstack/react-query";

export const getEvaluationKeySuspenseQueryKey = () =>
  [{ url: "/evaluation-key" }] as const;

export type GetEvaluationKeySuspenseQueryKey = ReturnType<
  typeof getEvaluationKeySuspenseQueryKey
>;

/**
 * @summary Get evaluation key from model service
 * {@link /evaluation-key}
 */
export async function getEvaluationKeySuspense(
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config;

  const res = await request<
    GetEvaluationKeyQueryResponse,
    ResponseErrorConfig<GetEvaluationKey400>,
    unknown
  >({
    method: "GET",
    url: `/evaluation-key`,
    ...requestConfig,
  });
  return res.data;
}

export function getEvaluationKeySuspenseQueryOptions(
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = getEvaluationKeySuspenseQueryKey();
  return queryOptions<
    GetEvaluationKeyQueryResponse,
    ResponseErrorConfig<GetEvaluationKey400>,
    GetEvaluationKeyQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return getEvaluationKeySuspense(config);
    },
  });
}

/**
 * @summary Get evaluation key from model service
 * {@link /evaluation-key}
 */
export function useGetEvaluationKeySuspense<
  TData = GetEvaluationKeyQueryResponse,
  TQueryKey extends QueryKey = GetEvaluationKeySuspenseQueryKey,
>(
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        GetEvaluationKeyQueryResponse,
        ResponseErrorConfig<GetEvaluationKey400>,
        TData,
        TQueryKey
      >
    > & {
      client?: QueryClient;
    };
    client?: Partial<RequestConfig> & { client?: typeof fetch };
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getEvaluationKeySuspenseQueryKey();

  const query = useSuspenseQuery(
    {
      ...getEvaluationKeySuspenseQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as UseSuspenseQueryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<
    TData,
    ResponseErrorConfig<GetEvaluationKey400>
  > & { queryKey: TQueryKey };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
