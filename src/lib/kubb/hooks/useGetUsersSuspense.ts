/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from "@/lib/authorized-client";
import type {
  GetUsersQueryResponse,
  GetUsersQueryParams,
  GetUsers400,
} from "../types/GetUsers";
import type {
  RequestConfig,
  ResponseErrorConfig,
} from "@/lib/authorized-client";
import type {
  QueryKey,
  QueryClient,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { queryOptions, useSuspenseQuery } from "@tanstack/react-query";

export const getUsersSuspenseQueryKey = (params?: GetUsersQueryParams) =>
  [{ url: "/users" }, ...(params ? [params] : [])] as const;

export type GetUsersSuspenseQueryKey = ReturnType<
  typeof getUsersSuspenseQueryKey
>;

/**
 * @summary Get users not in chat
 * {@link /users}
 */
export async function getUsersSuspense(
  params?: GetUsersQueryParams,
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config;

  const res = await request<
    GetUsersQueryResponse,
    ResponseErrorConfig<GetUsers400>,
    unknown
  >({ method: "GET", url: `/users`, params, ...requestConfig });
  return res.data;
}

export function getUsersSuspenseQueryOptions(
  params?: GetUsersQueryParams,
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = getUsersSuspenseQueryKey(params);
  return queryOptions<
    GetUsersQueryResponse,
    ResponseErrorConfig<GetUsers400>,
    GetUsersQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return getUsersSuspense(params, config);
    },
  });
}

/**
 * @summary Get users not in chat
 * {@link /users}
 */
export function useGetUsersSuspense<
  TData = GetUsersQueryResponse,
  TQueryKey extends QueryKey = GetUsersSuspenseQueryKey,
>(
  params?: GetUsersQueryParams,
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        GetUsersQueryResponse,
        ResponseErrorConfig<GetUsers400>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient };
    client?: Partial<RequestConfig> & { client?: typeof fetch };
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getUsersSuspenseQueryKey(params);

  const query = useSuspenseQuery(
    {
      ...getUsersSuspenseQueryOptions(params, config),
      queryKey,
      ...queryOptions,
    } as unknown as UseSuspenseQueryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<GetUsers400>> & {
    queryKey: TQueryKey;
  };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
