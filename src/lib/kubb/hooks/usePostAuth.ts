/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from "@/lib/authorized-client";
import type {
  PostAuthMutationRequest,
  PostAuthMutationResponse,
  PostAuth400,
} from "../types/PostAuth";
import type {
  RequestConfig,
  ResponseErrorConfig,
} from "@/lib/authorized-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const postAuthMutationKey = () => [{ url: "/auth" }] as const;

export type PostAuthMutationKey = ReturnType<typeof postAuthMutationKey>;

/**
 * @summary Authenticate user and return tokens
 * {@link /auth}
 */
export async function postAuth(
  data?: PostAuthMutationRequest,
  config: Partial<RequestConfig<PostAuthMutationRequest>> & {
    client?: typeof fetch;
  } = {},
) {
  const { client: request = fetch, ...requestConfig } = config;

  const requestData = data;
  const res = await request<
    PostAuthMutationResponse,
    ResponseErrorConfig<PostAuth400>,
    PostAuthMutationRequest
  >({
    method: "POST",
    url: `/auth`,
    data: requestData,
    ...requestConfig,
  });
  return res.data;
}

/**
 * @summary Authenticate user and return tokens
 * {@link /auth}
 */
export function usePostAuth<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PostAuthMutationResponse,
      ResponseErrorConfig<PostAuth400>,
      { data?: PostAuthMutationRequest },
      TContext
    > & {
      client?: QueryClient;
    };
    client?: Partial<RequestConfig<PostAuthMutationRequest>> & {
      client?: typeof fetch;
    };
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {};
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? postAuthMutationKey();

  return useMutation<
    PostAuthMutationResponse,
    ResponseErrorConfig<PostAuth400>,
    { data?: PostAuthMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return postAuth(data, config);
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  );
}
