/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from "@/lib/authorized-client2";
import type {
  GetClientChatIdQueryResponse,
  GetClientChatIdPathParams,
  GetClientChatId400,
} from "../types/GetClientChatId";
import type {
  RequestConfig,
  ResponseErrorConfig,
} from "@/lib/authorized-client2";
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const getClientChatIdQueryKey = (
  chat_id: GetClientChatIdPathParams["chat_id"],
) => [{ url: "/client/:chat_id", params: { chat_id: chat_id } }] as const;

export type GetClientChatIdQueryKey = ReturnType<
  typeof getClientChatIdQueryKey
>;

/**
 * @description Generate client configs for FHE.
 * {@link /client/:chat_id}
 */
export async function getClientChatId(
  chat_id: GetClientChatIdPathParams["chat_id"],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config;

  const res = await request<
    GetClientChatIdQueryResponse,
    ResponseErrorConfig<GetClientChatId400>,
    unknown
  >({
    method: "GET",
    url: `/client/${chat_id}`,
    ...requestConfig,
  });
  return res.data;
}

export function getClientChatIdQueryOptions(
  chat_id: GetClientChatIdPathParams["chat_id"],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = getClientChatIdQueryKey(chat_id);
  return queryOptions<
    GetClientChatIdQueryResponse,
    ResponseErrorConfig<GetClientChatId400>,
    GetClientChatIdQueryResponse,
    typeof queryKey
  >({
    enabled: !!chat_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return getClientChatId(chat_id, config);
    },
  });
}

/**
 * @description Generate client configs for FHE.
 * {@link /client/:chat_id}
 */
export function useGetClientChatId<
  TData = GetClientChatIdQueryResponse,
  TQueryData = GetClientChatIdQueryResponse,
  TQueryKey extends QueryKey = GetClientChatIdQueryKey,
>(
  chat_id: GetClientChatIdPathParams["chat_id"],
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetClientChatIdQueryResponse,
        ResponseErrorConfig<GetClientChatId400>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & {
      client?: QueryClient;
    };
    client?: Partial<RequestConfig> & { client?: typeof fetch };
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getClientChatIdQueryKey(chat_id);

  const query = useQuery(
    {
      ...getClientChatIdQueryOptions(chat_id, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetClientChatId400>> & {
    queryKey: TQueryKey;
  };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
