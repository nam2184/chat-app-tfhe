/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from "@/lib/authorized-client2";
import type {
  GetNormalKeysChatIdQueryResponse,
  GetNormalKeysChatIdPathParams,
  GetNormalKeysChatId400,
} from "../types/GetNormalKeysChatId";
import type {
  RequestConfig,
  ResponseErrorConfig,
} from "@/lib/authorized-client2";
import type {
  QueryKey,
  QueryClient,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { queryOptions, useSuspenseQuery } from "@tanstack/react-query";

export const getNormalKeysChatIdSuspenseQueryKey = (
  chat_id: GetNormalKeysChatIdPathParams["chat_id"],
) => [{ url: "/normal_keys/:chat_id", params: { chat_id: chat_id } }] as const;

export type GetNormalKeysChatIdSuspenseQueryKey = ReturnType<
  typeof getNormalKeysChatIdSuspenseQueryKey
>;

/**
 * @description Encrypt image using FHE.
 * {@link /normal_keys/:chat_id}
 */
export async function getNormalKeysChatIdSuspense(
  chat_id: GetNormalKeysChatIdPathParams["chat_id"],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config;

  const res = await request<
    GetNormalKeysChatIdQueryResponse,
    ResponseErrorConfig<GetNormalKeysChatId400>,
    unknown
  >({
    method: "GET",
    url: `/normal_keys/${chat_id}`,
    ...requestConfig,
  });
  return res.data;
}

export function getNormalKeysChatIdSuspenseQueryOptions(
  chat_id: GetNormalKeysChatIdPathParams["chat_id"],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = getNormalKeysChatIdSuspenseQueryKey(chat_id);
  return queryOptions<
    GetNormalKeysChatIdQueryResponse,
    ResponseErrorConfig<GetNormalKeysChatId400>,
    GetNormalKeysChatIdQueryResponse,
    typeof queryKey
  >({
    enabled: !!chat_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return getNormalKeysChatIdSuspense(chat_id, config);
    },
  });
}

/**
 * @description Encrypt image using FHE.
 * {@link /normal_keys/:chat_id}
 */
export function useGetNormalKeysChatIdSuspense<
  TData = GetNormalKeysChatIdQueryResponse,
  TQueryKey extends QueryKey = GetNormalKeysChatIdSuspenseQueryKey,
>(
  chat_id: GetNormalKeysChatIdPathParams["chat_id"],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        GetNormalKeysChatIdQueryResponse,
        ResponseErrorConfig<GetNormalKeysChatId400>,
        TData,
        TQueryKey
      >
    > & {
      client?: QueryClient;
    };
    client?: Partial<RequestConfig> & { client?: typeof fetch };
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {};
  const queryKey =
    queryOptions?.queryKey ?? getNormalKeysChatIdSuspenseQueryKey(chat_id);

  const query = useSuspenseQuery(
    {
      ...getNormalKeysChatIdSuspenseQueryOptions(chat_id, config),
      queryKey,
      ...queryOptions,
    } as unknown as UseSuspenseQueryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<
    TData,
    ResponseErrorConfig<GetNormalKeysChatId400>
  > & { queryKey: TQueryKey };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
