/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from "@/lib/authorized-client2";
import type {
  PostMessageMutationRequest,
  PostMessageMutationResponse,
  PostMessage400,
  PostMessage422,
} from "../types/PostMessage";
import type {
  RequestConfig,
  ResponseErrorConfig,
} from "@/lib/authorized-client2";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const postMessageMutationKey = () => [{ url: "/message" }] as const;

export type PostMessageMutationKey = ReturnType<typeof postMessageMutationKey>;

/**
 * @description Insert a message into the database.
 * {@link /message}
 */
export async function postMessage(
  data: PostMessageMutationRequest,
  config: Partial<RequestConfig<PostMessageMutationRequest>> & {
    client?: typeof fetch;
  } = {},
) {
  const { client: request = fetch, ...requestConfig } = config;

  const requestData = data;
  const res = await request<
    PostMessageMutationResponse,
    ResponseErrorConfig<PostMessage400 | PostMessage422>,
    PostMessageMutationRequest
  >({
    method: "POST",
    url: `/message`,
    data: requestData,
    ...requestConfig,
  });
  return res.data;
}

/**
 * @description Insert a message into the database.
 * {@link /message}
 */
export function usePostMessage<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PostMessageMutationResponse,
      ResponseErrorConfig<PostMessage400 | PostMessage422>,
      { data: PostMessageMutationRequest },
      TContext
    > & { client?: QueryClient };
    client?: Partial<RequestConfig<PostMessageMutationRequest>> & {
      client?: typeof fetch;
    };
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {};
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? postMessageMutationKey();

  return useMutation<
    PostMessageMutationResponse,
    ResponseErrorConfig<PostMessage400 | PostMessage422>,
    { data: PostMessageMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return postMessage(data, config);
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  );
}
