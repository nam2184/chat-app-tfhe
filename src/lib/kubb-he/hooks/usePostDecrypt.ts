/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from "@/lib/authorized-client2";
import type {
  PostDecryptMutationRequest,
  PostDecryptMutationResponse,
  PostDecrypt400,
  PostDecrypt422,
} from "../types/PostDecrypt";
import type {
  RequestConfig,
  ResponseErrorConfig,
} from "@/lib/authorized-client2";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const postDecryptMutationKey = () => [{ url: "/decrypt" }] as const;

export type PostDecryptMutationKey = ReturnType<typeof postDecryptMutationKey>;

/**
 * @description Decrypt encrypted image using FHE.
 * {@link /decrypt}
 */
export async function postDecrypt(
  data: PostDecryptMutationRequest,
  config: Partial<RequestConfig<PostDecryptMutationRequest>> & {
    client?: typeof fetch;
  } = {},
) {
  const { client: request = fetch, ...requestConfig } = config;

  const requestData = data;
  const res = await request<
    PostDecryptMutationResponse,
    ResponseErrorConfig<PostDecrypt400 | PostDecrypt422>,
    PostDecryptMutationRequest
  >({
    method: "POST",
    url: `/decrypt`,
    data: requestData,
    ...requestConfig,
  });
  return res.data;
}

/**
 * @description Decrypt encrypted image using FHE.
 * {@link /decrypt}
 */
export function usePostDecrypt<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PostDecryptMutationResponse,
      ResponseErrorConfig<PostDecrypt400 | PostDecrypt422>,
      { data: PostDecryptMutationRequest },
      TContext
    > & { client?: QueryClient };
    client?: Partial<RequestConfig<PostDecryptMutationRequest>> & {
      client?: typeof fetch;
    };
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {};
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? postDecryptMutationKey();

  return useMutation<
    PostDecryptMutationResponse,
    ResponseErrorConfig<PostDecrypt400 | PostDecrypt422>,
    { data: PostDecryptMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return postDecrypt(data, config);
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  );
}
