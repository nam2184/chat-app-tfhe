/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from "@/lib/authorized-client2";
import type {
  PostEncryptMutationRequest,
  PostEncryptMutationResponse,
  PostEncrypt400,
  PostEncrypt422,
} from "../types/PostEncrypt";
import type {
  RequestConfig,
  ResponseErrorConfig,
} from "@/lib/authorized-client2";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const postEncryptMutationKey = () => [{ url: "/encrypt" }] as const;

export type PostEncryptMutationKey = ReturnType<typeof postEncryptMutationKey>;

/**
 * @description Encrypt image using FHE.
 * {@link /encrypt}
 */
export async function postEncrypt(
  data: PostEncryptMutationRequest,
  config: Partial<RequestConfig<PostEncryptMutationRequest>> & {
    client?: typeof fetch;
  } = {},
) {
  const { client: request = fetch, ...requestConfig } = config;

  const requestData = data;
  const res = await request<
    PostEncryptMutationResponse,
    ResponseErrorConfig<PostEncrypt400 | PostEncrypt422>,
    PostEncryptMutationRequest
  >({
    method: "POST",
    url: `/encrypt`,
    data: requestData,
    ...requestConfig,
  });
  return res.data;
}

/**
 * @description Encrypt image using FHE.
 * {@link /encrypt}
 */
export function usePostEncrypt<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PostEncryptMutationResponse,
      ResponseErrorConfig<PostEncrypt400 | PostEncrypt422>,
      { data: PostEncryptMutationRequest },
      TContext
    > & { client?: QueryClient };
    client?: Partial<RequestConfig<PostEncryptMutationRequest>> & {
      client?: typeof fetch;
    };
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {};
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? postEncryptMutationKey();

  return useMutation<
    PostEncryptMutationResponse,
    ResponseErrorConfig<PostEncrypt400 | PostEncrypt422>,
    { data: PostEncryptMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return postEncrypt(data, config);
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  );
}
