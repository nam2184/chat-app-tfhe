/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from "@/lib/authorized-client2";
import type {
  GetClientUserIdQueryResponse,
  GetClientUserIdPathParams,
  GetClientUserId400,
} from "../types/GetClientUserId";
import type {
  RequestConfig,
  ResponseErrorConfig,
} from "@/lib/authorized-client2";
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const getClientUserIdQueryKey = (
  user_id: GetClientUserIdPathParams["user_id"],
) => [{ url: "/client/:user_id", params: { user_id: user_id } }] as const;

export type GetClientUserIdQueryKey = ReturnType<
  typeof getClientUserIdQueryKey
>;

/**
 * @description Generate client configs for FHE.
 * {@link /client/:user_id}
 */
export async function getClientUserId(
  user_id: GetClientUserIdPathParams["user_id"],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config;

  const res = await request<
    GetClientUserIdQueryResponse,
    ResponseErrorConfig<GetClientUserId400>,
    unknown
  >({
    method: "GET",
    url: `/client/${user_id}`,
    ...requestConfig,
  });
  return res.data;
}

export function getClientUserIdQueryOptions(
  user_id: GetClientUserIdPathParams["user_id"],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = getClientUserIdQueryKey(user_id);
  return queryOptions<
    GetClientUserIdQueryResponse,
    ResponseErrorConfig<GetClientUserId400>,
    GetClientUserIdQueryResponse,
    typeof queryKey
  >({
    enabled: !!user_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return getClientUserId(user_id, config);
    },
  });
}

/**
 * @description Generate client configs for FHE.
 * {@link /client/:user_id}
 */
export function useGetClientUserId<
  TData = GetClientUserIdQueryResponse,
  TQueryData = GetClientUserIdQueryResponse,
  TQueryKey extends QueryKey = GetClientUserIdQueryKey,
>(
  user_id: GetClientUserIdPathParams["user_id"],
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetClientUserIdQueryResponse,
        ResponseErrorConfig<GetClientUserId400>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & {
      client?: QueryClient;
    };
    client?: Partial<RequestConfig> & { client?: typeof fetch };
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getClientUserIdQueryKey(user_id);

  const query = useQuery(
    {
      ...getClientUserIdQueryOptions(user_id, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetClientUserId400>> & {
    queryKey: TQueryKey;
  };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
