/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from "@/lib/authorized-client2";
import type {
  GetMessagesChatIdQueryResponse,
  GetMessagesChatIdPathParams,
  GetMessagesChatIdQueryParams,
  GetMessagesChatId400,
  GetMessagesChatId422,
} from "../types/GetMessagesChatId";
import type {
  RequestConfig,
  ResponseErrorConfig,
} from "@/lib/authorized-client2";
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const getMessagesChatIdQueryKey = (
  chat_id: GetMessagesChatIdPathParams["chat_id"],
  params?: GetMessagesChatIdQueryParams,
) =>
  [
    { url: "/messages/:chat_id", params: { chat_id: chat_id } },
    ...(params ? [params] : []),
  ] as const;

export type GetMessagesChatIdQueryKey = ReturnType<
  typeof getMessagesChatIdQueryKey
>;

/**
 * @description Get messages by chat ID with optional sorting and pagination.
 * {@link /messages/:chat_id}
 */
export async function getMessagesChatId(
  chat_id: GetMessagesChatIdPathParams["chat_id"],
  params?: GetMessagesChatIdQueryParams,
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config;

  const res = await request<
    GetMessagesChatIdQueryResponse,
    ResponseErrorConfig<GetMessagesChatId400 | GetMessagesChatId422>,
    unknown
  >({
    method: "GET",
    url: `/messages/${chat_id}`,
    params,
    ...requestConfig,
  });
  return res.data;
}

export function getMessagesChatIdQueryOptions(
  chat_id: GetMessagesChatIdPathParams["chat_id"],
  params?: GetMessagesChatIdQueryParams,
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = getMessagesChatIdQueryKey(chat_id, params);
  return queryOptions<
    GetMessagesChatIdQueryResponse,
    ResponseErrorConfig<GetMessagesChatId400 | GetMessagesChatId422>,
    GetMessagesChatIdQueryResponse,
    typeof queryKey
  >({
    enabled: !!chat_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return getMessagesChatId(chat_id, params, config);
    },
  });
}

/**
 * @description Get messages by chat ID with optional sorting and pagination.
 * {@link /messages/:chat_id}
 */
export function useGetMessagesChatId<
  TData = GetMessagesChatIdQueryResponse,
  TQueryData = GetMessagesChatIdQueryResponse,
  TQueryKey extends QueryKey = GetMessagesChatIdQueryKey,
>(
  chat_id: GetMessagesChatIdPathParams["chat_id"],
  params?: GetMessagesChatIdQueryParams,
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetMessagesChatIdQueryResponse,
        ResponseErrorConfig<GetMessagesChatId400 | GetMessagesChatId422>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient };
    client?: Partial<RequestConfig> & { client?: typeof fetch };
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {};
  const queryKey =
    queryOptions?.queryKey ?? getMessagesChatIdQueryKey(chat_id, params);

  const query = useQuery(
    {
      ...getMessagesChatIdQueryOptions(chat_id, params, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<GetMessagesChatId400 | GetMessagesChatId422>
  > & { queryKey: TQueryKey };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
